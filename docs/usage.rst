Basic Usage
====================================

The primary usage of this application is for other RapidSMS applications to have
a common way to store and retrive patient/provider data even though each project
which deploy the application may use different methods of actually storing the
data.

Applications built with rapidsms-healtcare should use the functionality provided
by ``healthcare.api``. The ``client`` object in the module is primary entry point
for accessing the healthcare data. It provides basic CRUD (Create/Update/Delete)
operations for the patient and provider data::

    from healthcare.api import client

    patient = client.patients.create(name='Joe', sex='M')

Where this data is stored configured by the :ref:`HEALTHCARE_STORAGE_BACKEND` setting. The
default storage uses the Django ORM to store the information.

.. warning::

    Though the default storage backend uses the Django ORM, developers should resist
    all temptation to access the models directly (including creating FKs in additional models)
    as that will break the portability of the application.


Patient Information
------------------------------------

Operations on patient data are done through ``client.patients``. Currently the backend supports
``create``, ``get`` and ``update``::

    from healthcare.api import client

    # Create new patient
    patient = client.patients.create(name='Joe', sex='M')

    # Update the patient's name
    client.patients.update(patient['id'], name='Jack')

    # Refetch the patient record
    patient = client.patients.get(patient['id'])


Patient Data Model
____________________________________

Patients currently store the following pieces of data [#f1]_:

==============  ==============  ==============
Name            Type            Description
==============  ==============  ==============
*id*            String          Globally unique identifier
**name**        String          A readable name/identifier
sex             String (M/F)    Patient's sex
birth_date      Date            Date the patient was born
death_date      Date            Date the patient died
location        String          Identifier for the patient's location
*created_date*  Datetime        Time when the record was created
*updated_date*  Datetime        Time when the record was last updated
status          String (A/I)    Flag to denote if the record is currently active
==============  ==============  ==============

.. [#f1] Required fields are bold and generated values are in italics.

The ``location`` field might store the name of the location or an identifier for
another location/facility registry.


``patients.create``
____________________________________

``patients.create`` adds a new patient record to the data store. The arguments for this
function are passed to the backend to store on the record. The patient data is returned
as a dictionary and contains additional fields which are generated by the backend: ``id``,
``created_date`` and ``updated_date``.


``patients.update``
____________________________________

``patients.update`` takes the id of the patient along with arguments to be passed to the
backend to update. This returns a boolean to note whether a matching patient was found
and updated.


``patients.get``
____________________________________

``patients.get`` returns a patient's data as dictionary for the given id. If no matching
patient was found this will raise a ``PatientNotFound`` exception.


Provider Information
------------------------------------

Operations on patient data are done through ``client.providers``. Currently the backend supports
``create``, ``get`` and ``update``::

    from healthcare.api import client

    # Create new provider
    provider = client.providers.create(name='Joe')

    # Update the providers's name
    client.providers.update(provider['id'], name='Jack')

    # Refetch the provider record
    provider = client.providers.get(provider['id'])


Provider Data Model
____________________________________

Providers currently store the following pieces of data [#f2]_:

==============  ==============  ==============
Name            Type            Description
==============  ==============  ==============
*id*            String          Globally unique identifier
**name**        String          A readable name/identifier
location        String          Identifier for the provider's location
*created_date*  Datetime        Time when the record was created
*updated_date*  Datetime        Time when the record was last updated
status          String (A/I)    Flag to denote if the record is currently active
==============  ==============  ==============

.. [#f2] Required fields are bold and generated values are in italics.

As with patients, the ``location`` field might store the name of the location
or an identifier for another location/facility registry.


``providers.create``
____________________________________

``providers.create`` adds a new provider record to the data store. The arguments for this
function are passed to the backend to store on the record. The provider data is returned
as a dictionary and contains additional fields which are generated by the backend: ``id``,
``created_date`` and ``updated_date``.


``providers.update``
____________________________________

``providers.update`` takes the id of the provider along with arguments to be passed to the
backend to update. This returns a boolean to note whether a matching provider was found
and updated.


``providers.get``
____________________________________

``providers.get`` returns a provider's data as dictionary for the given id. If no matching
provider was found this will raise a ``ProviderNotFound`` exception.