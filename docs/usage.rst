Basic Usage
====================================

The primary usage of this application is for other RapidSMS applications to have
a common way to store and retrive patient/provider data even though each project
which deploy the application may use different methods of actually storing the
data.

Applications built with rapidsms-healtcare should use the functionality provided
by ``healthcare.api``. The ``client`` object in the module is primary entry point
for accessing the healthcare data. It provides basic CRUD (Create/Update/Delete)
operations for the patient and provider data::

    from healthcare.api import client

    patient = client.patients.create(name='Joe', sex='M')

Where this data is stored configured by the :ref:`HEALTHCARE_STORAGE_BACKEND` setting. The
default storage uses the Django ORM to store the information.

.. warning::

    Though the default storage backend uses the Django ORM, developers should resist
    all temptation to access the models directly (including creating FKs in additional models)
    as that will break the portability of the application.


Patient Information
------------------------------------

Operations on patient data are done through ``client.patients``. Currently the backend supports
``create``, ``get`` and ``update``::

    from healthcare.api import client

    # Create new patient
    patient = client.patients.create(name='Joe', sex='M')

    # Update the patient's name
    client.patients.update(patient['id'], name='Jack')

    # Refetch the patient record
    patient = client.patients.get(patient['id'])


``patients.create``
____________________________________

``patients.create`` adds a new patient record to the data store. The arguments for this
function are passed to the backend to store on the record. The patient data is returned
as a dictionary and contains additional fields which are generated by the backend: ``id``,
``created_date`` and ``updated_date``.


``patients.update``
____________________________________

``patients.update`` takes the id of the patient along with arguments to be passed to the
backend to update. This returns a boolean to note whether a matching patient was found
and updated.


``patients.get``
____________________________________

``patients.get`` returns a patient's data as dictionary for the given id. If no matching
patient was found this will raise a ``PatientNotFound`` exception.